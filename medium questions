-- company_code, founder name, total number of lead managers, total number of senior managers, total number of managers, and total number of employees. Order your output by ascending
SELECT COMPANY.COMPANY_CODE,COMPANY.FOUNDER,COUNT(DISTINCT LEAD_MANAGER_CODE),COUNT(DISTINCT SENIOR_MANAGER_CODE),COUNT(DISTINCT MANAGER_CODE),COUNT(DISTINCT EMPLOYEE_CODE)
FROM COMPANY JOIN EMPLOYEE 
ON COMPANY.COMPANY_CODE=EMPLOYEE.COMPANY_CODE
GROUP BY COMPANY.FOUNDER,COMPANY.COMPANY_CODE
ORDER BY COMPANY.COMPANY_CODE

--A median is defined as a number separating the higher half of a data set from the lower half. Query the median of the Northern Latitudes (LAT_N) from STATION and round your answer to  decimal places.
SET @TABLESIZE := (SELECT COUNT(LAT_N) FROM STATION); 
--paranthesis ensures it is a subquery and it feteches a single value and assign it to variable,without it sql throws error
SELECT ROUND(AVG(LAT_N),4)
FROM (SELECT LAT_N, ROW_NUMBER() OVER(ORDER BY LAT_N) AS RN FROM STATION) TEMP
WHERE(
     CASE WHEN MOD(@TABLESIZE,2)!=0 
          THEN 
              RN = (@TABLESIZE+1)/2
          WHEN MOD(@TABLESIZE,2)=0 
          THEN 
              RN IN (ROUND(@table_size / 2, 0), ROUND(@table_size / 2, 0) + 1)
--in checks if value exists in list the result includes all the rows with thosevalues
      END
    );


--3)You are given two tables: Students and Grades. Students contains three columns ID, Name and Marks.
--Ketty gives Eve a task to generate a report containing three columns: Name, Grade and Mark.
--Ketty doesn't want the NAMES of those students who received a grade lower than 8. The report must be in descending order by grade 

SELECT 
CASE
WHEN GRADES.GRADE<8 THEN NULL
ELSE STUDENTS.NAME
END AS NAME,GRADES.GRADE,STUDENTS.MARKS
FROM STUDENTS JOIN GRADES
ON STUDENTS.MARKS BETWEEN GRADES.MIN_MARK AND GRADES.MAX_MARK 
ORDER BY GRADES.GRADE DESC,STUDENTS.NAME ASC,STUDENTS.MARKS DESC
--CASE in WHERE must return a boolean condition (TRUE or FALSE), not a value.
--If you want to remove rows, use WHERE GRADES.GRADE >= 8.
--If you want to modify output values, use CASE inside SELECT.

4)TOP COMPANIES
---- hacker_id and name of hackers who achieved full scores for more than one challenge
--desc no.of chalenges,asc hacker id
--hackers,difficulty,challenges,submissions
SELECT HACKER_ID, NAME
FROM (
    SELECT 
        S.HACKER_ID,
        H.NAME,
        COUNT(S.HACKER_ID) AS SUB_COUNT
    FROM SUBMISSIONS S
    JOIN HACKERS H ON S.HACKER_ID = H.HACKER_ID
    JOIN CHALLENGES C ON S.CHALLENGE_ID = C.CHALLENGE_ID
    JOIN DIFFICULTY D ON C.DIFFICULTY_LEVEL = D.DIFFICULTY_LEVEL 
    WHERE S.SCORE = D.SCORE
    GROUP BY S.HACKER_ID, H.NAME
    HAVING COUNT(S.HACKER_ID) > 1
) AS Ranked_Hackers
ORDER BY SUB_COUNT DESC, HACKER_ID ASC;
